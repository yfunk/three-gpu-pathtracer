{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,0B,I,G,I,E,E,S,E,E,SCGA,IAAM,EAAa,IAAI,EAAA,OAAM,AACtB,OAAM,UAAgC,EAAA,yBAAwB,CAEpE,YAAa,EAAa,GAAG,CAAG,CAE/B,KAAK,CAAE,EAAY,GAEnB,IAAI,CAAC,QAAQ,CAAG,GAAI,CAAA,EAAA,EAAA,KAAI,AAAJ,IAAQ,GAAG,CAAE,UACjC,IAAI,CAAC,WAAW,CAAG,GAAI,CAAA,EAAA,EAAA,KAAI,AAAJ,IAAQ,GAAG,CAAE,GACpC,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,kBAAkB,CAAG,CAAE,EAAO,EAAI,EAAO,KAE7C,EAAW,gBAAgB,CAAE,GAE7B,IAAM,EAAI,AAAe,GAAf,EAAW,CAAC,CAAS,GAC/B,EAAM,UAAU,CAAE,IAAI,CAAC,WAAW,CAAE,IAAI,CAAC,QAAQ,CAAE,GAAK,IAAI,CAAC,QAAQ,CAEtE,CAED,CAEA,KAAM,CAAK,CAAG,CAMb,OAJA,KAAK,CAAC,KAAM,GAEZ,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,EAAM,QAAQ,EAClC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAE,EAAM,WAAW,EACjC,IAAI,AAEZ,CAED,C,G,E,Q,S,C,C,C,E,E,E,O,C,4B,I,G,I,E,E,SCrBA,IAAM,EAAM,IAAI,EAAA,OAAM,CAChB,EAAS,IAAI,EAAA,OAAM,CACnB,EAAS,IAAI,EAAA,SAAQ,CACrB,EAAS,IAAI,EAAA,KAAI,AAChB,OAAM,UAAkC,EAAA,WAAU,CAExD,YAAa,EAAQ,GAAG,CAAE,EAAS,GAAG,CAAG,CAExC,KAAK,CACJ,IAAI,a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","sources":["<anon>","src/textures/GradientEquirectTexture.js","src/textures/ProceduralEquirectTexture.js","src/core/WebGLPathTracer.js","src/materials/fullscreen/ClampedInterpolationMaterial.js","example/utils/getScaledSettings.js","src/materials/MaterialBase.js","src/shader/common/math_functions.glsl.js","src/shader/common/util_functions.glsl.js","src/shader/bsdf/ggx_functions.glsl.js","example/primitives.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5b70\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5b70\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bHiTZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"GradientEquirectTexture\", () => $88425f7125b6e46c$export$38d6a241e670a287);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $dbdMq = parcelRequire(\"dbdMq\");\nconst $88425f7125b6e46c$var$_direction = new (0, $ilwiq.Vector3)();\nclass $88425f7125b6e46c$export$38d6a241e670a287 extends (0, $dbdMq.ProceduralEquirectTexture) {\n    constructor(resolution = 512){\n        super(resolution, resolution);\n        this.topColor = new (0, $ilwiq.Color)().set(0xffffff);\n        this.bottomColor = new (0, $ilwiq.Color)().set(0x000000);\n        this.exponent = 2;\n        this.generationCallback = (polar, uv, coord, color)=>{\n            $88425f7125b6e46c$var$_direction.setFromSpherical(polar);\n            const t = $88425f7125b6e46c$var$_direction.y * 0.5 + 0.5;\n            color.lerpColors(this.bottomColor, this.topColor, t ** this.exponent);\n        };\n    }\n    copy(other) {\n        super.copy(other);\n        this.topColor.copy(other.topColor);\n        this.bottomColor.copy(other.bottomColor);\n        return this;\n    }\n}\n\n});\nparcelRegister(\"dbdMq\", function(module, exports) {\n\n$parcel$export(module.exports, \"ProceduralEquirectTexture\", () => $9986fde00d79bc96$export$ab88b3c5fea10066);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $9986fde00d79bc96$var$_uv = new (0, $ilwiq.Vector2)();\nconst $9986fde00d79bc96$var$_coord = new (0, $ilwiq.Vector2)();\nconst $9986fde00d79bc96$var$_polar = new (0, $ilwiq.Spherical)();\nconst $9986fde00d79bc96$var$_color = new (0, $ilwiq.Color)();\nclass $9986fde00d79bc96$export$ab88b3c5fea10066 extends (0, $ilwiq.DataTexture) {\n    constructor(width = 512, height = 512){\n        super(new Float32Array(width * height * 4), width, height, (0, $ilwiq.RGBAFormat), (0, $ilwiq.FloatType), (0, $ilwiq.EquirectangularReflectionMapping), (0, $ilwiq.RepeatWrapping), (0, $ilwiq.ClampToEdgeWrapping), (0, $ilwiq.LinearFilter), (0, $ilwiq.LinearFilter));\n        this.generationCallback = null;\n    }\n    update() {\n        this.dispose();\n        this.needsUpdate = true;\n        const { data: data, width: width, height: height } = this.image;\n        for(let x = 0; x < width; x++)for(let y = 0; y < height; y++){\n            $9986fde00d79bc96$var$_coord.set(width, height);\n            $9986fde00d79bc96$var$_uv.set(x / width, y / height);\n            $9986fde00d79bc96$var$_uv.x -= 0.5;\n            $9986fde00d79bc96$var$_uv.y = 1.0 - $9986fde00d79bc96$var$_uv.y;\n            $9986fde00d79bc96$var$_polar.theta = $9986fde00d79bc96$var$_uv.x * 2.0 * Math.PI;\n            $9986fde00d79bc96$var$_polar.phi = $9986fde00d79bc96$var$_uv.y * Math.PI;\n            $9986fde00d79bc96$var$_polar.radius = 1.0;\n            this.generationCallback($9986fde00d79bc96$var$_polar, $9986fde00d79bc96$var$_uv, $9986fde00d79bc96$var$_coord, $9986fde00d79bc96$var$_color);\n            const i = y * width + x;\n            const i4 = 4 * i;\n            data[i4 + 0] = $9986fde00d79bc96$var$_color.r;\n            data[i4 + 1] = $9986fde00d79bc96$var$_color.g;\n            data[i4 + 2] = $9986fde00d79bc96$var$_color.b;\n            data[i4 + 3] = 1.0;\n        }\n    }\n    copy(other) {\n        super.copy(other);\n        this.generationCallback = other.generationCallback;\n        return this;\n    }\n}\n\n});\n\n\nparcelRegister(\"8mHfG\", function(module, exports) {\n\n$parcel$export(module.exports, \"WebGLPathTracer\", () => $6171edc1778f11e8$export$3a05a7fb86d40d58);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $hWj76 = parcelRequire(\"hWj76\");\n\nvar $hWds8 = parcelRequire(\"hWds8\");\n\nvar $RPVlj = parcelRequire(\"RPVlj\");\n\nvar $bHiTZ = parcelRequire(\"bHiTZ\");\n\nvar $9wqOU = parcelRequire(\"9wqOU\");\n\nvar $5rCKZ = parcelRequire(\"5rCKZ\");\nfunction $6171edc1778f11e8$var$supportsFloatBlending(renderer) {\n    return renderer.extensions.get(\"EXT_float_blend\");\n}\nconst $6171edc1778f11e8$var$_resolution = new (0, $ilwiq.Vector2)();\nclass $6171edc1778f11e8$export$3a05a7fb86d40d58 {\n    get multipleImportanceSampling() {\n        return Boolean(this._pathTracer.material.defines.FEATURE_MIS);\n    }\n    set multipleImportanceSampling(v) {\n        this._pathTracer.material.setDefine(\"FEATURE_MIS\", v ? 1 : 0);\n    }\n    get transmissiveBounces() {\n        return this._pathTracer.material.transmissiveBounces;\n    }\n    set transmissiveBounces(v) {\n        this._pathTracer.material.transmissiveBounces = v;\n    }\n    get bounces() {\n        return this._pathTracer.material.bounces;\n    }\n    set bounces(v) {\n        this._pathTracer.material.bounces = v;\n    }\n    get filterGlossyFactor() {\n        return this._pathTracer.material.filterGlossyFactor;\n    }\n    set filterGlossyFactor(v) {\n        this._pathTracer.material.filterGlossyFactor = v;\n    }\n    get samples() {\n        return this._pathTracer.samples;\n    }\n    get target() {\n        return this._pathTracer.target;\n    }\n    get tiles() {\n        return this._pathTracer.tiles;\n    }\n    constructor(renderer){\n        // members\n        this._renderer = renderer;\n        this._generator = new (0, $hWj76.PathTracingSceneGenerator)();\n        this._pathTracer = new (0, $hWds8.PathTracingRenderer)(renderer);\n        this._queueReset = false;\n        this._clock = new (0, $ilwiq.Clock)();\n        this._lowResPathTracer = new (0, $hWds8.PathTracingRenderer)(renderer);\n        this._lowResPathTracer.tiles.set(1, 1);\n        this._quad = new (0, $RPVlj.FullScreenQuad)(new (0, $5rCKZ.ClampedInterpolationMaterial)({\n            map: null,\n            transparent: true,\n            blending: (0, $ilwiq.NoBlending),\n            premultipliedAlpha: renderer.getContextAttributes().premultipliedAlpha\n        }));\n        this._materials = null;\n        // options\n        this.renderDelay = 100;\n        this.minSamples = 5;\n        this.fadeDuration = 500;\n        this.enablePathTracing = true;\n        this.pausePathTracing = false;\n        this.dynamicLowRes = false;\n        this.lowResScale = 0.25;\n        this.renderScale = 1;\n        this.synchronizeRenderSize = true;\n        this.rasterizeScene = true;\n        this.renderToCanvas = true;\n        this.textureSize = new (0, $ilwiq.Vector2)(1024, 1024);\n        this.rasterizeSceneCallback = (scene, camera)=>{\n            this._renderer.render(scene, camera);\n        };\n        this.renderToCanvasCallback = (target, renderer, quad)=>{\n            const currentAutoClear = renderer.autoClear;\n            renderer.autoClear = false;\n            quad.render(renderer);\n            renderer.autoClear = currentAutoClear;\n        };\n        // initialize the scene so it doesn't fail\n        this.setScene(new (0, $ilwiq.Scene)(), new (0, $ilwiq.PerspectiveCamera)());\n    }\n    setBVHWorker(worker) {\n        this._generator.setBVHWorker(worker);\n    }\n    setScene(scene, camera, options = {}) {\n        scene.updateMatrixWorld(true);\n        camera.updateMatrixWorld();\n        const generator = this._generator;\n        generator.setObjects(scene);\n        if (this._buildAsync) return generator.generateAsync(options.onProgress).then((result)=>{\n            return this._updateFromResults(scene, camera, result);\n        });\n        else {\n            const result = generator.generate();\n            return this._updateFromResults(scene, camera, result);\n        }\n    }\n    setSceneAsync(...args) {\n        this._buildAsync = true;\n        const result = this.setScene(...args);\n        this._buildAsync = false;\n        return result;\n    }\n    setCamera(camera) {\n        this.camera = camera;\n        this.updateCamera();\n    }\n    updateCamera() {\n        const camera = this.camera;\n        camera.updateMatrixWorld();\n        this._pathTracer.setCamera(camera);\n        this._lowResPathTracer.setCamera(camera);\n        this.reset();\n    }\n    updateMaterials() {\n        const material = this._pathTracer.material;\n        const renderer = this._renderer;\n        const materials = this._materials;\n        const textureSize = this.textureSize;\n        // TODO: reduce texture sources here - we don't want to do this in the\n        // textures array because we need to pass the textures array into the\n        // material target\n        const textures = (0, $9wqOU.getTextures)(materials);\n        material.textures.setTextures(renderer, textures, textureSize.x, textureSize.y);\n        material.materials.updateFrom(materials, textures);\n        this.reset();\n    }\n    updateLights() {\n        const scene = this.scene;\n        const renderer = this._renderer;\n        const material = this._pathTracer.material;\n        const lights = (0, $9wqOU.getLights)(scene);\n        const iesTextures = (0, $9wqOU.getIesTextures)(lights);\n        material.lights.updateFrom(lights, iesTextures);\n        material.iesProfiles.setTextures(renderer, iesTextures);\n        this.reset();\n    }\n    updateEnvironment() {\n        const scene = this.scene;\n        const material = this._pathTracer.material;\n        // update scene background\n        material.backgroundBlur = scene.backgroundBlurriness;\n        material.backgroundIntensity = scene.backgroundIntensity ?? 1;\n        material.backgroundRotation.makeRotationFromEuler(scene.backgroundRotation).invert();\n        if (scene.background === null) {\n            material.backgroundMap = null;\n            material.backgroundAlpha = 0;\n        } else if (scene.background.isColor) {\n            this._colorBackground = this._colorBackground || new (0, $bHiTZ.GradientEquirectTexture)(16);\n            const colorBackground = this._colorBackground;\n            if (!colorBackground.topColor.equals(scene.background)) {\n                // set the texture color\n                colorBackground.topColor.set(scene.background);\n                colorBackground.bottomColor.set(scene.background);\n                colorBackground.update();\n            }\n            // assign to material\n            material.backgroundMap = colorBackground;\n            material.backgroundAlpha = 1;\n        } else {\n            material.backgroundMap = scene.background;\n            material.backgroundAlpha = 1;\n        }\n        // update scene environment\n        material.environmentIntensity = scene.environmentIntensity ?? 1;\n        material.environmentRotation.makeRotationFromEuler(scene.environmentRotation).invert();\n        if (this._previousEnvironment !== scene.environment) {\n            if (scene.environment) // TODO: Consider setting this to the highest supported bit depth by checking for\n            // OES_texture_float_linear or OES_texture_half_float_linear. Requires changes to\n            // the equirect uniform\n            material.envMapInfo.updateFrom(scene.environment);\n            else material.environmentIntensity = 0;\n        }\n        this._previousEnvironment = scene.environment;\n        this.reset();\n    }\n    _updateFromResults(scene, camera, results) {\n        const { materials: materials, geometry: geometry, bvh: bvh, bvhChanged: bvhChanged } = results;\n        this._materials = materials;\n        const pathTracer = this._pathTracer;\n        const material = pathTracer.material;\n        if (bvhChanged) {\n            material.bvh.updateFrom(bvh);\n            material.attributesArray.updateFrom(geometry.attributes.normal, geometry.attributes.tangent, geometry.attributes.uv, geometry.attributes.color);\n            material.materialIndexAttribute.updateFrom(geometry.attributes.materialIndex);\n        }\n        // save previously used items\n        this._previousScene = scene;\n        this.scene = scene;\n        this.camera = camera;\n        this.updateCamera();\n        this.updateMaterials();\n        this.updateEnvironment();\n        this.updateLights();\n        return results;\n    }\n    renderSample() {\n        const lowResPathTracer = this._lowResPathTracer;\n        const pathTracer = this._pathTracer;\n        const renderer = this._renderer;\n        const clock = this._clock;\n        const quad = this._quad;\n        this._updateScale();\n        if (this._queueReset) {\n            pathTracer.reset();\n            lowResPathTracer.reset();\n            this._queueReset = false;\n            quad.material.opacity = 0;\n            clock.start();\n        }\n        // render the path tracing sample after enough time has passed\n        const delta = clock.getDelta() * 1e3;\n        const elapsedTime = clock.getElapsedTime() * 1e3;\n        if (!this.pausePathTracing && this.enablePathTracing && this.renderDelay <= elapsedTime) pathTracer.update();\n        // when alpha is enabled we use a manual blending system rather than\n        // rendering with a blend function\n        pathTracer.alpha = pathTracer.material.backgroundAlpha !== 1 || !$6171edc1778f11e8$var$supportsFloatBlending(renderer);\n        lowResPathTracer.alpha = pathTracer.alpha;\n        if (this.renderToCanvas) {\n            const renderer = this._renderer;\n            const minSamples = this.minSamples;\n            if (elapsedTime >= this.renderDelay && this.samples >= this.minSamples) {\n                if (this.fadeDuration !== 0) quad.material.opacity = Math.min(quad.material.opacity + delta / this.fadeDuration, 1);\n                else quad.material.opacity = 1;\n            }\n            // render the fallback if we haven't rendered enough samples, are paused, or are occluded\n            if (!this.enablePathTracing || this.samples < minSamples || quad.material.opacity < 1) {\n                if (this.dynamicLowRes) {\n                    if (lowResPathTracer.samples < 1) {\n                        lowResPathTracer.material = pathTracer.material;\n                        lowResPathTracer.update();\n                    }\n                    const currentOpacity = quad.material.opacity;\n                    quad.material.opacity = 1 - quad.material.opacity;\n                    quad.material.map = lowResPathTracer.target.texture;\n                    quad.render(renderer);\n                    quad.material.opacity = currentOpacity;\n                } else if (this.rasterizeScene) this.rasterizeSceneCallback(this.scene, this.camera);\n            }\n            if (this.enablePathTracing && quad.material.opacity > 0) {\n                if (quad.material.opacity < 1) // use additive blending when the low res texture is rendered so we can fade the\n                // background out while the full res fades in\n                quad.material.blending = this.dynamicLowRes ? (0, $ilwiq.AdditiveBlending) : (0, $ilwiq.NormalBlending);\n                quad.material.map = pathTracer.target.texture;\n                this.renderToCanvasCallback(pathTracer.target, renderer, quad);\n                quad.material.blending = (0, $ilwiq.NoBlending);\n            }\n        }\n    }\n    reset() {\n        this._queueReset = true;\n        this._pathTracer.samples = 0;\n    }\n    dispose() {\n        this._renderQuad.dispose();\n        this._renderQuad.material.dispose();\n        this._pathTracer.dispose();\n    }\n    _updateScale() {\n        // update the path tracer scale if it has changed\n        if (this.synchronizeRenderSize) {\n            this._renderer.getDrawingBufferSize($6171edc1778f11e8$var$_resolution);\n            const w = Math.floor(this.renderScale * $6171edc1778f11e8$var$_resolution.x);\n            const h = Math.floor(this.renderScale * $6171edc1778f11e8$var$_resolution.y);\n            this._pathTracer.getSize($6171edc1778f11e8$var$_resolution);\n            if ($6171edc1778f11e8$var$_resolution.x !== w || $6171edc1778f11e8$var$_resolution.y !== h) {\n                const lowResScale = this.lowResScale;\n                this._pathTracer.setSize(w, h);\n                this._lowResPathTracer.setSize(Math.floor(w * lowResScale), Math.floor(h * lowResScale));\n            }\n        }\n    }\n}\n\n});\nparcelRegister(\"5rCKZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"ClampedInterpolationMaterial\", () => $3f6d89af35c8e149$export$41f50d3add172b7d);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $3f6d89af35c8e149$export$41f50d3add172b7d extends (0, $ilwiq.ShaderMaterial) {\n    get map() {\n        return this.uniforms.map.value;\n    }\n    set map(v) {\n        this.uniforms.map.value = v;\n    }\n    get opacity() {\n        return this.uniforms.opacity.value;\n    }\n    set opacity(v) {\n        if (this.uniforms) this.uniforms.opacity.value = v;\n    }\n    constructor(params){\n        super({\n            uniforms: {\n                map: {\n                    value: null\n                },\n                opacity: {\n                    value: 1\n                }\n            },\n            vertexShader: /* glsl */ `\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n            fragmentShader: /* glsl */ `\n\t\t\t\tuniform sampler2D map;\n\t\t\t\tuniform float opacity;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvec4 clampedTexelFatch( sampler2D map, ivec2 px, int lod ) {\n\n\t\t\t\t\tvec4 res = texelFetch( map, ivec2( px.x, px.y ), 0 );\n\n\t\t\t\t\t#if defined( TONE_MAPPING )\n\n\t\t\t\t\tres.xyz = toneMapping( res.xyz );\n\n\t\t\t\t\t#endif\n\n\t\t\t  \t\treturn linearToOutputTexel( res );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec2 size = vec2( textureSize( map, 0 ) );\n\t\t\t\t\tvec2 pxUv = vUv * size;\n\t\t\t\t\tvec2 pxCurr = floor( pxUv );\n\t\t\t\t\tvec2 pxFrac = fract( pxUv ) - 0.5;\n\t\t\t\t\tvec2 pxOffset;\n\t\t\t\t\tpxOffset.x = pxFrac.x > 0.0 ? 1.0 : - 1.0;\n\t\t\t\t\tpxOffset.y = pxFrac.y > 0.0 ? 1.0 : - 1.0;\n\n\t\t\t\t\tvec2 pxNext = clamp( pxOffset + pxCurr, vec2( 0.0 ), size - 1.0 );\n\t\t\t\t\tvec2 alpha = abs( pxFrac );\n\n\t\t\t\t\tvec4 p1 = mix(\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxCurr.y ), 0 ),\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxCurr.y ), 0 ),\n\t\t\t\t\t\talpha.x\n\t\t\t\t\t);\n\n\t\t\t\t\tvec4 p2 = mix(\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxNext.y ), 0 ),\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxNext.y ), 0 ),\n\t\t\t\t\t\talpha.x\n\t\t\t\t\t);\n\n\t\t\t\t\tgl_FragColor = mix( p1, p2, alpha.y );\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`\n        });\n        this.setValues(params);\n    }\n}\n\n});\n\n\nparcelRegister(\"cE5k3\", function(module, exports) {\n\n$parcel$export(module.exports, \"getScaledSettings\", () => $934d596524c3e5a8$export$5bc756cb1c628b75);\nfunction $934d596524c3e5a8$export$5bc756cb1c628b75() {\n    let tiles = 3;\n    let renderScale = Math.max(1 / window.devicePixelRatio, 0.5);\n    // adjust performance parameters for mobile\n    const aspectRatio = window.innerWidth / window.innerHeight;\n    if (aspectRatio < 0.65) {\n        tiles = 4;\n        renderScale = 0.5 / window.devicePixelRatio;\n    }\n    return {\n        tiles: tiles,\n        renderScale: renderScale\n    };\n}\n\n});\n\nparcelRegister(\"9fZ6X\", function(module, exports) {\n\n$parcel$export(module.exports, \"MaterialBase\", () => $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $6bd4eb2914ee2835$export$f1ac3a587b6cbb5d extends (0, $ilwiq.ShaderMaterial) {\n    constructor(shader){\n        super(shader);\n        for(const key in this.uniforms)Object.defineProperty(this, key, {\n            get () {\n                return this.uniforms[key].value;\n            },\n            set (v) {\n                this.uniforms[key].value = v;\n            }\n        });\n    }\n    // sets the given named define value and sets \"needsUpdate\" to true if it's different\n    setDefine(name, value) {\n        if (value === undefined || value === null) {\n            if (name in this.defines) {\n                delete this.defines[name];\n                this.needsUpdate = true;\n                return true;\n            }\n        } else if (this.defines[name] !== value) {\n            this.defines[name] = value;\n            this.needsUpdate = true;\n            return true;\n        }\n        return false;\n    }\n}\n\n});\n\nparcelRegister(\"fYvb1\", function(module, exports) {\n\n$parcel$export(module.exports, \"math_functions\", () => $ba14a4aaa0cde19b$export$98323a006d35be35);\nconst $ba14a4aaa0cde19b$export$98323a006d35be35 = /* glsl */ `\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n\n});\n\nparcelRegister(\"dUUQZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"util_functions\", () => $a21c9b4177584031$export$fe1d788deccfbee3);\nconst $a21c9b4177584031$export$fe1d788deccfbee3 = /* glsl */ `\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n\n});\n\nparcelRegister(\"8keuf\", function(module, exports) {\n\n$parcel$export(module.exports, \"ggx_functions\", () => $60fb6dc3c6495c33$export$4c711108e2e8ef5e);\nconst $60fb6dc3c6495c33$export$4c711108e2e8ef5e = /* glsl */ `\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n\n});\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $bHiTZ = parcelRequire(\"bHiTZ\");\nvar $8mHfG = parcelRequire(\"8mHfG\");\n\nvar $cE5k3 = parcelRequire(\"cE5k3\");\n// init scene, renderer, camera, controls, etc\nconst $5dea9d3597503074$var$scene = new (0, $ilwiq.Scene)();\nconst $5dea9d3597503074$var$sphereGeom = new (0, $ilwiq.SphereGeometry)(0.49, 64, 32);\nconst $5dea9d3597503074$var$ball1 = new (0, $ilwiq.Mesh)($5dea9d3597503074$var$sphereGeom, new (0, $ilwiq.MeshStandardMaterial)({\n    color: \"#e91e63\",\n    roughness: 0.25,\n    metalness: 1\n}));\nconst $5dea9d3597503074$var$ball2 = new (0, $ilwiq.Mesh)($5dea9d3597503074$var$sphereGeom, new (0, $ilwiq.MeshStandardMaterial)({\n    color: \"#ff9800\",\n    roughness: 0.1,\n    metalness: 1\n}));\nconst $5dea9d3597503074$var$ball3 = new (0, $ilwiq.Mesh)($5dea9d3597503074$var$sphereGeom, new (0, $ilwiq.MeshStandardMaterial)({\n    color: \"#2196f3\",\n    roughness: 0.2,\n    metalness: 1\n}));\nconst $5dea9d3597503074$var$ground = new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(3.5, 0.1, 1.5), new (0, $ilwiq.MeshStandardMaterial)());\n$5dea9d3597503074$var$ball1.position.x = -1;\n$5dea9d3597503074$var$ball3.position.x = 1;\n$5dea9d3597503074$var$ground.position.y = -0.54;\n$5dea9d3597503074$var$scene.add($5dea9d3597503074$var$ball1, $5dea9d3597503074$var$ball2, $5dea9d3597503074$var$ball3, $5dea9d3597503074$var$ground);\n// set the environment map\nconst $5dea9d3597503074$var$texture = new (0, $bHiTZ.GradientEquirectTexture)();\n$5dea9d3597503074$var$texture.bottomColor.set(0xffffff);\n$5dea9d3597503074$var$texture.bottomColor.set(0x666666);\n$5dea9d3597503074$var$texture.update();\n$5dea9d3597503074$var$scene.environment = $5dea9d3597503074$var$texture;\n$5dea9d3597503074$var$scene.background = $5dea9d3597503074$var$texture;\nconst $5dea9d3597503074$var$camera = new (0, $ilwiq.PerspectiveCamera)();\n$5dea9d3597503074$var$camera.position.set(0, 1, -5);\n$5dea9d3597503074$var$camera.lookAt(0, 0, 0);\nconst $5dea9d3597503074$var$renderer = new (0, $ilwiq.WebGLRenderer)({\n    antialias: true\n});\n$5dea9d3597503074$var$renderer.toneMapping = (0, $ilwiq.ACESFilmicToneMapping);\ndocument.body.appendChild($5dea9d3597503074$var$renderer.domElement);\nconst $5dea9d3597503074$var$settings = (0, $cE5k3.getScaledSettings)();\nconst $5dea9d3597503074$var$pathTracer = new (0, $8mHfG.WebGLPathTracer)($5dea9d3597503074$var$renderer);\n$5dea9d3597503074$var$pathTracer.renderScale = $5dea9d3597503074$var$settings.renderScale;\n$5dea9d3597503074$var$pathTracer.tiles.setScalar($5dea9d3597503074$var$settings.tiles);\n$5dea9d3597503074$var$pathTracer.setScene($5dea9d3597503074$var$scene, $5dea9d3597503074$var$camera);\n$5dea9d3597503074$var$onResize();\n$5dea9d3597503074$var$animate();\nwindow.addEventListener(\"resize\", $5dea9d3597503074$var$onResize);\nfunction $5dea9d3597503074$var$animate() {\n    // if the camera position changes call \"ptRenderer.reset()\"\n    requestAnimationFrame($5dea9d3597503074$var$animate);\n    // update the camera and render one sample\n    $5dea9d3597503074$var$pathTracer.renderSample();\n}\nfunction $5dea9d3597503074$var$onResize() {\n    // update rendering resolution\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n    $5dea9d3597503074$var$renderer.setSize(w, h);\n    $5dea9d3597503074$var$renderer.setPixelRatio(window.devicePixelRatio);\n    const aspect = w / h;\n    $5dea9d3597503074$var$camera.aspect = aspect;\n    $5dea9d3597503074$var$camera.updateProjectionMatrix();\n    $5dea9d3597503074$var$pathTracer.setScene($5dea9d3597503074$var$scene, $5dea9d3597503074$var$camera);\n}\n\n\n//# sourceMappingURL=primitives.19827130.js.map\n","import { Color, Vector3 } from 'three';\nimport { ProceduralEquirectTexture } from './ProceduralEquirectTexture.js';\n\nconst _direction = new Vector3();\nexport class GradientEquirectTexture extends ProceduralEquirectTexture {\n\n\tconstructor( resolution = 512 ) {\n\n\t\tsuper( resolution, resolution );\n\n\t\tthis.topColor = new Color().set( 0xffffff );\n\t\tthis.bottomColor = new Color().set( 0x000000 );\n\t\tthis.exponent = 2;\n\t\tthis.generationCallback = ( polar, uv, coord, color ) => {\n\n\t\t\t_direction.setFromSpherical( polar );\n\n\t\t\tconst t = _direction.y * 0.5 + 0.5;\n\t\t\tcolor.lerpColors( this.bottomColor, this.topColor, t ** this.exponent );\n\n\t\t};\n\n\t}\n\n\tcopy( other ) {\n\n\t\tsuper.copy( other );\n\n\t\tthis.topColor.copy( other.topColor );\n\t\tthis.bottomColor.copy( other.bottomColor );\n\t\treturn this;\n\n\t}\n\n}\n","import {\n\tClampToEdgeWrapping,\n\tColor,\n\tDataTexture,\n\tEquirectangularReflectionMapping,\n\tLinearFilter,\n\tRepeatWrapping,\n\tRGBAFormat,\n\tSpherical,\n\tVector2,\n\tFloatType\n} from 'three';\n\nconst _uv = new Vector2();\nconst _coord = new Vector2();\nconst _polar = new Spherical();\nconst _color = new Color();\nexport class ProceduralEquirectTexture extends DataTexture {\n\n\tconstructor( width = 512, height = 512 ) {\n\n\t\tsuper(\n\t\t\tnew Float32Array( width * height * 4 ),\n\t\t\twidth, height, RGBAFormat, FloatType, EquirectangularReflectionMapping,\n\t\t\tRepeatWrapping, ClampToEdgeWrapping, LinearFilter, LinearFilter,\n\t\t);\n\n\t\tthis.generationCallback = null;\n\n\t}\n\n\tupdate() {\n\n\t\tthis.dispose();\n\t\tthis.needsUpdate = true;\n\n\t\tconst { data, width, height } = this.image;\n\t\tfor ( let x = 0; x < width; x ++ ) {\n\n\t\t\tfor ( let y = 0; y < height; y ++ ) {\n\n\t\t\t\t_coord.set( width, height );\n\n\t\t\t\t_uv.set( x / width, y / height );\n\t\t\t\t_uv.x -= 0.5;\n\t\t\t\t_uv.y = 1.0 - _uv.y;\n\n\t\t\t\t_polar.theta = _uv.x * 2.0 * Math.PI;\n\t\t\t\t_polar.phi = _uv.y * Math.PI;\n\t\t\t\t_polar.radius = 1.0;\n\n\t\t\t\tthis.generationCallback( _polar, _uv, _coord, _color );\n\n\t\t\t\tconst i = y * width + x;\n\t\t\t\tconst i4 = 4 * i;\n\t\t\t\tdata[ i4 + 0 ] = ( _color.r );\n\t\t\t\tdata[ i4 + 1 ] = ( _color.g );\n\t\t\t\tdata[ i4 + 2 ] = ( _color.b );\n\t\t\t\tdata[ i4 + 3 ] = ( 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( other ) {\n\n\t\tsuper.copy( other );\n\t\tthis.generationCallback = other.generationCallback;\n\t\treturn this;\n\n\t}\n\n}\n","import { PerspectiveCamera, Scene, Vector2, Clock, NormalBlending, NoBlending, AdditiveBlending } from 'three';\nimport { PathTracingSceneGenerator } from './PathTracingSceneGenerator.js';\nimport { PathTracingRenderer } from './PathTracingRenderer.js';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GradientEquirectTexture } from '../textures/GradientEquirectTexture.js';\nimport { getIesTextures, getLights, getTextures } from './utils/sceneUpdateUtils.js';\nimport { ClampedInterpolationMaterial } from '../materials/fullscreen/ClampedInterpolationMaterial.js';\n\nfunction supportsFloatBlending( renderer ) {\n\n\treturn renderer.extensions.get( 'EXT_float_blend' );\n\n}\n\nconst _resolution = new Vector2();\nexport class WebGLPathTracer {\n\n\tget multipleImportanceSampling() {\n\n\t\treturn Boolean( this._pathTracer.material.defines.FEATURE_MIS );\n\n\t}\n\n\tset multipleImportanceSampling( v ) {\n\n\t\tthis._pathTracer.material.setDefine( 'FEATURE_MIS', v ? 1 : 0 );\n\n\t}\n\n\tget transmissiveBounces() {\n\n\t\treturn this._pathTracer.material.transmissiveBounces;\n\n\t}\n\n\tset transmissiveBounces( v ) {\n\n\t\tthis._pathTracer.material.transmissiveBounces = v;\n\n\t}\n\n\tget bounces() {\n\n\t\treturn this._pathTracer.material.bounces;\n\n\t}\n\n\tset bounces( v ) {\n\n\t\tthis._pathTracer.material.bounces = v;\n\n\t}\n\n\tget filterGlossyFactor() {\n\n\t\treturn this._pathTracer.material.filterGlossyFactor;\n\n\t}\n\n\tset filterGlossyFactor( v ) {\n\n\t\tthis._pathTracer.material.filterGlossyFactor = v;\n\n\t}\n\n\tget samples() {\n\n\t\treturn this._pathTracer.samples;\n\n\t}\n\n\tget target() {\n\n\t\treturn this._pathTracer.target;\n\n\t}\n\n\tget tiles() {\n\n\t\treturn this._pathTracer.tiles;\n\n\t}\n\n\tconstructor( renderer ) {\n\n\t\t// members\n\t\tthis._renderer = renderer;\n\t\tthis._generator = new PathTracingSceneGenerator();\n\t\tthis._pathTracer = new PathTracingRenderer( renderer );\n\t\tthis._queueReset = false;\n\t\tthis._clock = new Clock();\n\n\t\tthis._lowResPathTracer = new PathTracingRenderer( renderer );\n\t\tthis._lowResPathTracer.tiles.set( 1, 1 );\n\t\tthis._quad = new FullScreenQuad( new ClampedInterpolationMaterial( {\n\t\t\tmap: null,\n\t\t\ttransparent: true,\n\t\t\tblending: NoBlending,\n\n\t\t\tpremultipliedAlpha: renderer.getContextAttributes().premultipliedAlpha,\n\t\t} ) );\n\t\tthis._materials = null;\n\n\t\t// options\n\t\tthis.renderDelay = 100;\n\t\tthis.minSamples = 5;\n\t\tthis.fadeDuration = 500;\n\t\tthis.enablePathTracing = true;\n\t\tthis.pausePathTracing = false;\n\t\tthis.dynamicLowRes = false;\n\t\tthis.lowResScale = 0.25;\n\t\tthis.renderScale = 1;\n\t\tthis.synchronizeRenderSize = true;\n\t\tthis.rasterizeScene = true;\n\t\tthis.renderToCanvas = true;\n\t\tthis.textureSize = new Vector2( 1024, 1024 );\n\t\tthis.rasterizeSceneCallback = ( scene, camera ) => {\n\n\t\t\tthis._renderer.render( scene, camera );\n\n\t\t};\n\n\t\tthis.renderToCanvasCallback = ( target, renderer, quad ) => {\n\n\t\t\tconst currentAutoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\t\t\tquad.render( renderer );\n\t\t\trenderer.autoClear = currentAutoClear;\n\n\t\t};\n\n\t\t// initialize the scene so it doesn't fail\n\t\tthis.setScene( new Scene(), new PerspectiveCamera() );\n\n\t}\n\n\tsetBVHWorker( worker ) {\n\n\t\tthis._generator.setBVHWorker( worker );\n\n\t}\n\n\tsetScene( scene, camera, options = {} ) {\n\n\t\tscene.updateMatrixWorld( true );\n\t\tcamera.updateMatrixWorld();\n\n\t\tconst generator = this._generator;\n\t\tgenerator.setObjects( scene );\n\n\t\tif ( this._buildAsync ) {\n\n\t\t\treturn generator.generateAsync( options.onProgress ).then( result => {\n\n\t\t\t\treturn this._updateFromResults( scene, camera, result );\n\n\t\t\t} );\n\n\t\t} else {\n\n\t\t\tconst result = generator.generate();\n\t\t\treturn this._updateFromResults( scene, camera, result );\n\n\t\t}\n\n\t}\n\n\tsetSceneAsync( ...args ) {\n\n\t\tthis._buildAsync = true;\n\t\tconst result = this.setScene( ...args );\n\t\tthis._buildAsync = false;\n\n\t\treturn result;\n\n\t}\n\n\tsetCamera( camera ) {\n\n\t\tthis.camera = camera;\n\t\tthis.updateCamera();\n\n\t}\n\n\tupdateCamera() {\n\n\t\tconst camera = this.camera;\n\t\tcamera.updateMatrixWorld();\n\n\t\tthis._pathTracer.setCamera( camera );\n\t\tthis._lowResPathTracer.setCamera( camera );\n\t\tthis.reset();\n\n\t}\n\n\tupdateMaterials() {\n\n\t\tconst material = this._pathTracer.material;\n\t\tconst renderer = this._renderer;\n\t\tconst materials = this._materials;\n\t\tconst textureSize = this.textureSize;\n\n\t\t// TODO: reduce texture sources here - we don't want to do this in the\n\t\t// textures array because we need to pass the textures array into the\n\t\t// material target\n\t\tconst textures = getTextures( materials );\n\t\tmaterial.textures.setTextures( renderer, textures, textureSize.x, textureSize.y );\n\t\tmaterial.materials.updateFrom( materials, textures );\n\t\tthis.reset();\n\n\t}\n\n\tupdateLights() {\n\n\t\tconst scene = this.scene;\n\t\tconst renderer = this._renderer;\n\t\tconst material = this._pathTracer.material;\n\n\t\tconst lights = getLights( scene );\n\t\tconst iesTextures = getIesTextures( lights );\n\t\tmaterial.lights.updateFrom( lights, iesTextures );\n\t\tmaterial.iesProfiles.setTextures( renderer, iesTextures );\n\t\tthis.reset();\n\n\t}\n\n\tupdateEnvironment() {\n\n\t\tconst scene = this.scene;\n\t\tconst material = this._pathTracer.material;\n\n\t\t// update scene background\n\t\tmaterial.backgroundBlur = scene.backgroundBlurriness;\n\t\tmaterial.backgroundIntensity = scene.backgroundIntensity ?? 1;\n\t\tmaterial.backgroundRotation.makeRotationFromEuler( scene.backgroundRotation ).invert();\n\t\tif ( scene.background === null ) {\n\n\t\t\tmaterial.backgroundMap = null;\n\t\t\tmaterial.backgroundAlpha = 0;\n\n\t\t} else if ( scene.background.isColor ) {\n\n\t\t\tthis._colorBackground = this._colorBackground || new GradientEquirectTexture( 16 );\n\n\t\t\tconst colorBackground = this._colorBackground;\n\t\t\tif ( ! colorBackground.topColor.equals( scene.background ) ) {\n\n\t\t\t\t// set the texture color\n\t\t\t\tcolorBackground.topColor.set( scene.background );\n\t\t\t\tcolorBackground.bottomColor.set( scene.background );\n\t\t\t\tcolorBackground.update();\n\n\t\t\t}\n\n\t\t\t// assign to material\n\t\t\tmaterial.backgroundMap = colorBackground;\n\t\t\tmaterial.backgroundAlpha = 1;\n\n\t\t} else {\n\n\t\t\tmaterial.backgroundMap = scene.background;\n\t\t\tmaterial.backgroundAlpha = 1;\n\n\t\t}\n\n\t\t// update scene environment\n\t\tmaterial.environmentIntensity = scene.environmentIntensity ?? 1;\n\t\tmaterial.environmentRotation.makeRotationFromEuler( scene.environmentRotation ).invert();\n\t\tif ( this._previousEnvironment !== scene.environment ) {\n\n\t\t\tif ( scene.environment ) {\n\n\t\t\t\t// TODO: Consider setting this to the highest supported bit depth by checking for\n\t\t\t\t// OES_texture_float_linear or OES_texture_half_float_linear. Requires changes to\n\t\t\t\t// the equirect uniform\n\t\t\t\tmaterial.envMapInfo.updateFrom( scene.environment );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.environmentIntensity = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._previousEnvironment = scene.environment;\n\t\tthis.reset();\n\n\t}\n\n\t_updateFromResults( scene, camera, results ) {\n\n\t\tconst {\n\t\t\tmaterials,\n\t\t\tgeometry,\n\t\t\tbvh,\n\t\t\tbvhChanged,\n\t\t} = results;\n\n\t\tthis._materials = materials;\n\n\t\tconst pathTracer = this._pathTracer;\n\t\tconst material = pathTracer.material;\n\n\t\tif ( bvhChanged ) {\n\n\t\t\tmaterial.bvh.updateFrom( bvh );\n\t\t\tmaterial.attributesArray.updateFrom(\n\t\t\t\tgeometry.attributes.normal,\n\t\t\t\tgeometry.attributes.tangent,\n\t\t\t\tgeometry.attributes.uv,\n\t\t\t\tgeometry.attributes.color,\n\t\t\t);\n\n\t\t\tmaterial.materialIndexAttribute.updateFrom( geometry.attributes.materialIndex );\n\n\t\t}\n\n\t\t// save previously used items\n\t\tthis._previousScene = scene;\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.updateCamera();\n\t\tthis.updateMaterials();\n\t\tthis.updateEnvironment();\n\t\tthis.updateLights();\n\n\t\treturn results;\n\n\t}\n\n\trenderSample() {\n\n\t\tconst lowResPathTracer = this._lowResPathTracer;\n\t\tconst pathTracer = this._pathTracer;\n\t\tconst renderer = this._renderer;\n\t\tconst clock = this._clock;\n\t\tconst quad = this._quad;\n\n\t\tthis._updateScale();\n\n\t\tif ( this._queueReset ) {\n\n\t\t\tpathTracer.reset();\n\t\t\tlowResPathTracer.reset();\n\t\t\tthis._queueReset = false;\n\n\t\t\tquad.material.opacity = 0;\n\t\t\tclock.start();\n\n\t\t}\n\n\t\t// render the path tracing sample after enough time has passed\n\t\tconst delta = clock.getDelta() * 1e3;\n\t\tconst elapsedTime = clock.getElapsedTime() * 1e3;\n\t\tif ( ! this.pausePathTracing && this.enablePathTracing && this.renderDelay <= elapsedTime ) {\n\n\t\t\tpathTracer.update();\n\n\t\t}\n\n\t\t// when alpha is enabled we use a manual blending system rather than\n\t\t// rendering with a blend function\n\t\tpathTracer.alpha = pathTracer.material.backgroundAlpha !== 1 || ! supportsFloatBlending( renderer );\n\t\tlowResPathTracer.alpha = pathTracer.alpha;\n\n\t\tif ( this.renderToCanvas ) {\n\n\t\t\tconst renderer = this._renderer;\n\t\t\tconst minSamples = this.minSamples;\n\n\t\t\tif ( elapsedTime >= this.renderDelay && this.samples >= this.minSamples ) {\n\n\t\t\t\tif ( this.fadeDuration !== 0 ) {\n\n\t\t\t\t\tquad.material.opacity = Math.min( quad.material.opacity + delta / this.fadeDuration, 1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tquad.material.opacity = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// render the fallback if we haven't rendered enough samples, are paused, or are occluded\n\t\t\tif ( ! this.enablePathTracing || this.samples < minSamples || quad.material.opacity < 1 ) {\n\n\t\t\t\tif ( this.dynamicLowRes ) {\n\n\t\t\t\t\tif ( lowResPathTracer.samples < 1 ) {\n\n\t\t\t\t\t\tlowResPathTracer.material = pathTracer.material;\n\t\t\t\t\t\tlowResPathTracer.update();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst currentOpacity = quad.material.opacity;\n\t\t\t\t\tquad.material.opacity = 1 - quad.material.opacity;\n\t\t\t\t\tquad.material.map = lowResPathTracer.target.texture;\n\t\t\t\t\tquad.render( renderer );\n\t\t\t\t\tquad.material.opacity = currentOpacity;\n\n\t\t\t\t} else if ( this.rasterizeScene ) {\n\n\t\t\t\t\tthis.rasterizeSceneCallback( this.scene, this.camera );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif ( this.enablePathTracing && quad.material.opacity > 0 ) {\n\n\t\t\t\tif ( quad.material.opacity < 1 ) {\n\n\t\t\t\t\t// use additive blending when the low res texture is rendered so we can fade the\n\t\t\t\t\t// background out while the full res fades in\n\t\t\t\t\tquad.material.blending = this.dynamicLowRes ? AdditiveBlending : NormalBlending;\n\n\t\t\t\t}\n\n\t\t\t\tquad.material.map = pathTracer.target.texture;\n\t\t\t\tthis.renderToCanvasCallback( pathTracer.target, renderer, quad );\n\t\t\t\tquad.material.blending = NoBlending;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treset() {\n\n\t\tthis._queueReset = true;\n\t\tthis._pathTracer.samples = 0;\n\n\t}\n\n\tdispose() {\n\n\t\tthis._renderQuad.dispose();\n\t\tthis._renderQuad.material.dispose();\n\t\tthis._pathTracer.dispose();\n\n\t}\n\n\t_updateScale() {\n\n\t\t// update the path tracer scale if it has changed\n\t\tif ( this.synchronizeRenderSize ) {\n\n\t\t\tthis._renderer.getDrawingBufferSize( _resolution );\n\n\t\t\tconst w = Math.floor( this.renderScale * _resolution.x );\n\t\t\tconst h = Math.floor( this.renderScale * _resolution.y );\n\n\t\t\tthis._pathTracer.getSize( _resolution );\n\t\t\tif ( _resolution.x !== w || _resolution.y !== h ) {\n\n\t\t\t\tconst lowResScale = this.lowResScale;\n\t\t\t\tthis._pathTracer.setSize( w, h );\n\t\t\t\tthis._lowResPathTracer.setSize( Math.floor( w * lowResScale ), Math.floor( h * lowResScale ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n","import { ShaderMaterial } from 'three';\n\n// Material that tone maps a texture before performing interpolation to prevent\n// unexpected high values during texture stretching interpolation.\n// Emulates browser image stretching\nexport class ClampedInterpolationMaterial extends ShaderMaterial {\n\n\tget map() {\n\n\t\treturn this.uniforms.map.value;\n\n\t}\n\n\tset map( v ) {\n\n\t\tthis.uniforms.map.value = v;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.uniforms.opacity.value;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tif ( this.uniforms ) {\n\n\t\t\tthis.uniforms.opacity.value = v;\n\n\t\t}\n\n\t}\n\n\tconstructor( params ) {\n\n\t\tsuper( {\n\t\t\tuniforms: {\n\n\t\t\t\tmap: { value: null },\n\t\t\t\topacity: { value: 1 },\n\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\t\t\t\tuniform sampler2D map;\n\t\t\t\tuniform float opacity;\n\t\t\t\tvarying vec2 vUv;\n\n\t\t\t\tvec4 clampedTexelFatch( sampler2D map, ivec2 px, int lod ) {\n\n\t\t\t\t\tvec4 res = texelFetch( map, ivec2( px.x, px.y ), 0 );\n\n\t\t\t\t\t#if defined( TONE_MAPPING )\n\n\t\t\t\t\tres.xyz = toneMapping( res.xyz );\n\n\t\t\t\t\t#endif\n\n\t\t\t  \t\treturn linearToOutputTexel( res );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec2 size = vec2( textureSize( map, 0 ) );\n\t\t\t\t\tvec2 pxUv = vUv * size;\n\t\t\t\t\tvec2 pxCurr = floor( pxUv );\n\t\t\t\t\tvec2 pxFrac = fract( pxUv ) - 0.5;\n\t\t\t\t\tvec2 pxOffset;\n\t\t\t\t\tpxOffset.x = pxFrac.x > 0.0 ? 1.0 : - 1.0;\n\t\t\t\t\tpxOffset.y = pxFrac.y > 0.0 ? 1.0 : - 1.0;\n\n\t\t\t\t\tvec2 pxNext = clamp( pxOffset + pxCurr, vec2( 0.0 ), size - 1.0 );\n\t\t\t\t\tvec2 alpha = abs( pxFrac );\n\n\t\t\t\t\tvec4 p1 = mix(\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxCurr.y ), 0 ),\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxCurr.y ), 0 ),\n\t\t\t\t\t\talpha.x\n\t\t\t\t\t);\n\n\t\t\t\t\tvec4 p2 = mix(\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxCurr.x, pxNext.y ), 0 ),\n\t\t\t\t\t\tclampedTexelFatch( map, ivec2( pxNext.x, pxNext.y ), 0 ),\n\t\t\t\t\t\talpha.x\n\t\t\t\t\t);\n\n\t\t\t\t\tgl_FragColor = mix( p1, p2, alpha.y );\n\t\t\t\t\tgl_FragColor.a *= opacity;\n\t\t\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t\t\t}\n\t\t\t`\n\t\t} );\n\n\t\tthis.setValues( params );\n\n\t}\n\n}\n","export function getScaledSettings() {\n\n\tlet tiles = 3;\n\tlet renderScale = Math.max( 1 / window.devicePixelRatio, 0.5 );\n\n\t// adjust performance parameters for mobile\n\tconst aspectRatio = window.innerWidth / window.innerHeight;\n\tif ( aspectRatio < 0.65 ) {\n\n\t\ttiles = 4;\n\t\trenderScale = 0.5 / window.devicePixelRatio;\n\n\t}\n\n\treturn { tiles, renderScale };\n\n}\n","import { ShaderMaterial } from 'three';\n\nexport class MaterialBase extends ShaderMaterial {\n\n\tconstructor( shader ) {\n\n\t\tsuper( shader );\n\n\t\tfor ( const key in this.uniforms ) {\n\n\t\t\tObject.defineProperty( this, key, {\n\n\t\t\t\tget() {\n\n\t\t\t\t\treturn this.uniforms[ key ].value;\n\n\t\t\t\t},\n\n\t\t\t\tset( v ) {\n\n\t\t\t\t\tthis.uniforms[ key ].value = v;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// sets the given named define value and sets \"needsUpdate\" to true if it's different\n\tsetDefine( name, value = undefined ) {\n\n\t\tif ( value === undefined || value === null ) {\n\n\t\t\tif ( name in this.defines ) {\n\n\t\t\t\tdelete this.defines[ name ];\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this.defines[ name ] !== value ) {\n\n\t\t\t\tthis.defines[ name ] = value;\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n}\n","export const math_functions = /* glsl */`\n\n\t// Fast arccos approximation used to remove banding artifacts caused by numerical errors in acos.\n\t// This is a cubic Lagrange interpolating polynomial for x = [-1, -1/2, 0, 1/2, 1].\n\t// For more information see: https://github.com/gkjohnson/three-gpu-pathtracer/pull/171#issuecomment-1152275248\n\tfloat acosApprox( float x ) {\n\n\t\tx = clamp( x, -1.0, 1.0 );\n\t\treturn ( - 0.69813170079773212 * x * x - 0.87266462599716477 ) * x + 1.5707963267948966;\n\n\t}\n\n\t// An acos with input values bound to the range [-1, 1].\n\tfloat acosSafe( float x ) {\n\n\t\treturn acos( clamp( x, -1.0, 1.0 ) );\n\n\t}\n\n\tfloat saturateCos( float val ) {\n\n\t\treturn clamp( val, 0.001, 1.0 );\n\n\t}\n\n\tfloat square( float t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 square( vec2 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec3 square( vec3 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec4 square( vec4 t ) {\n\n\t\treturn t * t;\n\n\t}\n\n\tvec2 rotateVector( vec2 v, float t ) {\n\n\t\tfloat ac = cos( t );\n\t\tfloat as = sin( t );\n\t\treturn vec2(\n\t\t\tv.x * ac - v.y * as,\n\t\t\tv.x * as + v.y * ac\n\t\t);\n\n\t}\n\n\t// forms a basis with the normal vector as Z\n\tmat3 getBasisFromNormal( vec3 normal ) {\n\n\t\tvec3 other;\n\t\tif ( abs( normal.x ) > 0.5 ) {\n\n\t\t\tother = vec3( 0.0, 1.0, 0.0 );\n\n\t\t} else {\n\n\t\t\tother = vec3( 1.0, 0.0, 0.0 );\n\n\t\t}\n\n\t\tvec3 ortho = normalize( cross( normal, other ) );\n\t\tvec3 ortho2 = normalize( cross( normal, ortho ) );\n\t\treturn mat3( ortho2, ortho, normal );\n\n\t}\n\n`;\n","export const util_functions = /* glsl */`\n\n\t// TODO: possibly this should be renamed something related to material or path tracing logic\n\n\t#ifndef RAY_OFFSET\n\t#define RAY_OFFSET 1e-4\n\t#endif\n\n\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t// maximum component-wise value of the current point to accommodate floating point\n\t// error as values increase.\n\tvec3 stepRayOrigin( vec3 rayOrigin, vec3 rayDirection, vec3 offset, float dist ) {\n\n\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\tvec3 absPoint = abs( point );\n\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\treturn point + offset * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\n\t}\n\n\t// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#attenuation\n\tvec3 transmissionAttenuation( float dist, vec3 attColor, float attDist ) {\n\n\t\tvec3 ot = - log( attColor ) / attDist;\n\t\treturn exp( - ot * dist );\n\n\t}\n\n\tvec3 getHalfVector( vec3 wi, vec3 wo, float eta ) {\n\n\t\t// get the half vector - assuming if the light incident vector is on the other side\n\t\t// of the that it's transmissive.\n\t\tvec3 h;\n\t\tif ( wi.z > 0.0 ) {\n\n\t\t\th = normalize( wi + wo );\n\n\t\t} else {\n\n\t\t\t// Scale by the ior ratio to retrieve the appropriate half vector\n\t\t\t// From Section 2.2 on computing the transmission half vector:\n\t\t\t// https://blog.selfshadow.com/publications/s2015-shading-course/burley/s2015_pbs_disney_bsdf_notes.pdf\n\t\t\th = normalize( wi + wo * eta );\n\n\t\t}\n\n\t\th *= sign( h.z );\n\t\treturn h;\n\n\t}\n\n\tvec3 getHalfVector( vec3 a, vec3 b ) {\n\n\t\treturn normalize( a + b );\n\n\t}\n\n\t// The discrepancy between interpolated surface normal and geometry normal can cause issues when a ray\n\t// is cast that is on the top side of the geometry normal plane but below the surface normal plane. If\n\t// we find a ray like that we ignore it to avoid artifacts.\n\t// This function returns if the direction is on the same side of both planes.\n\tbool isDirectionValid( vec3 direction, vec3 surfaceNormal, vec3 geometryNormal ) {\n\n\t\tbool aboveSurfaceNormal = dot( direction, surfaceNormal ) > 0.0;\n\t\tbool aboveGeometryNormal = dot( direction, geometryNormal ) > 0.0;\n\t\treturn aboveSurfaceNormal == aboveGeometryNormal;\n\n\t}\n\n\t// ray sampling x and z are swapped to align with expected background view\n\tvec2 equirectDirectionToUv( vec3 direction ) {\n\n\t\t// from Spherical.setFromCartesianCoords\n\t\tvec2 uv = vec2( atan( direction.z, direction.x ), acos( direction.y ) );\n\t\tuv /= vec2( 2.0 * PI, PI );\n\n\t\t// apply adjustments to get values in range [0, 1] and y right side up\n\t\tuv.x += 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\t\treturn uv;\n\n\t}\n\n\tvec3 equirectUvToDirection( vec2 uv ) {\n\n\t\t// undo above adjustments\n\t\tuv.x -= 0.5;\n\t\tuv.y = 1.0 - uv.y;\n\n\t\t// from Vector3.setFromSphericalCoords\n\t\tfloat theta = uv.x * 2.0 * PI;\n\t\tfloat phi = uv.y * PI;\n\n\t\tfloat sinPhi = sin( phi );\n\n\t\treturn vec3( sinPhi * cos( theta ), cos( phi ), sinPhi * sin( theta ) );\n\n\t}\n\n\t// power heuristic for multiple importance sampling\n\tfloat misHeuristic( float a, float b ) {\n\n\t\tfloat aa = a * a;\n\t\tfloat bb = b * b;\n\t\treturn aa / ( aa + bb );\n\n\t}\n\n\t// tentFilter from Peter Shirley's 'Realistic Ray Tracing (2nd Edition)' book, pg. 60\n\t// erichlof/THREE.js-PathTracing-Renderer/\n\tfloat tentFilter( float x ) {\n\n\t\treturn x < 0.5 ? sqrt( 2.0 * x ) - 1.0 : 1.0 - sqrt( 2.0 - ( 2.0 * x ) );\n\n\t}\n`;\n","export const ggx_functions = /* glsl */`\n\n\t// The GGX functions provide sampling and distribution information for normals as output so\n\t// in order to get probability of scatter direction the half vector must be computed and provided.\n\t// [0] https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.pdf\n\t// [1] https://hal.archives-ouvertes.fr/hal-01509746/document\n\t// [2] http://jcgt.org/published/0007/04/01/\n\t// [4] http://jcgt.org/published/0003/02/03/\n\n\t// trowbridge-reitz === GGX === GTR\n\n\tvec3 ggxDirection( vec3 incidentDir, vec2 roughness, vec2 uv ) {\n\n\t\t// TODO: try GGXVNDF implementation from reference [2], here. Needs to update ggxDistribution\n\t\t// function below, as well\n\n\t\t// Implementation from reference [1]\n\t\t// stretch view\n\t\tvec3 V = normalize( vec3( roughness * incidentDir.xy, incidentDir.z ) );\n\n\t\t// orthonormal basis\n\t\tvec3 T1 = ( V.z < 0.9999 ) ? normalize( cross( V, vec3( 0.0, 0.0, 1.0 ) ) ) : vec3( 1.0, 0.0, 0.0 );\n\t\tvec3 T2 = cross( T1, V );\n\n\t\t// sample point with polar coordinates (r, phi)\n\t\tfloat a = 1.0 / ( 1.0 + V.z );\n\t\tfloat r = sqrt( uv.x );\n\t\tfloat phi = ( uv.y < a ) ? uv.y / a * PI : PI + ( uv.y - a ) / ( 1.0 - a ) * PI;\n\t\tfloat P1 = r * cos( phi );\n\t\tfloat P2 = r * sin( phi ) * ( ( uv.y < a ) ? 1.0 : V.z );\n\n\t\t// compute normal\n\t\tvec3 N = P1 * T1 + P2 * T2 + V * sqrt( max( 0.0, 1.0 - P1 * P1 - P2 * P2 ) );\n\n\t\t// unstretch\n\t\tN = normalize( vec3( roughness * N.xy, max( 0.0, N.z ) ) );\n\n\t\treturn N;\n\n\t}\n\n\t// Below are PDF and related functions for use in a Monte Carlo path tracer\n\t// as specified in Appendix B of the following paper\n\t// See equation (34) from reference [0]\n\tfloat ggxLamda( float theta, float roughness ) {\n\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = tanTheta * tanTheta;\n\t\tfloat alpha2 = roughness * roughness;\n\n\t\tfloat numerator = - 1.0 + sqrt( 1.0 + alpha2 * tanTheta2 );\n\t\treturn numerator / 2.0;\n\n\t}\n\n\t// See equation (34) from reference [0]\n\tfloat ggxShadowMaskG1( float theta, float roughness ) {\n\n\t\treturn 1.0 / ( 1.0 + ggxLamda( theta, roughness ) );\n\n\t}\n\n\t// See equation (125) from reference [4]\n\tfloat ggxShadowMaskG2( vec3 wi, vec3 wo, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat scatterTheta = acos( wo.z );\n\t\treturn 1.0 / ( 1.0 + ggxLamda( incidentTheta, roughness ) + ggxLamda( scatterTheta, roughness ) );\n\n\t}\n\n\t// See equation (33) from reference [0]\n\tfloat ggxDistribution( vec3 halfVector, float roughness ) {\n\n\t\tfloat a2 = roughness * roughness;\n\t\ta2 = max( EPSILON, a2 );\n\t\tfloat cosTheta = halfVector.z;\n\t\tfloat cosTheta4 = pow( cosTheta, 4.0 );\n\n\t\tif ( cosTheta == 0.0 ) return 0.0;\n\n\t\tfloat theta = acosSafe( halfVector.z );\n\t\tfloat tanTheta = tan( theta );\n\t\tfloat tanTheta2 = pow( tanTheta, 2.0 );\n\n\t\tfloat denom = PI * cosTheta4 * pow( a2 + tanTheta2, 2.0 );\n\t\treturn ( a2 / denom );\n\n\t}\n\n\t// See equation (3) from reference [2]\n\tfloat ggxPDF( vec3 wi, vec3 halfVector, float roughness ) {\n\n\t\tfloat incidentTheta = acos( wi.z );\n\t\tfloat D = ggxDistribution( halfVector, roughness );\n\t\tfloat G1 = ggxShadowMaskG1( incidentTheta, roughness );\n\n\t\treturn D * G1 * max( 0.0, dot( wi, halfVector ) ) / wi.z;\n\n\t}\n\n`;\n","import { Scene, SphereGeometry, MeshStandardMaterial, Mesh, BoxGeometry, PerspectiveCamera, ACESFilmicToneMapping, WebGLRenderer } from 'three';\nimport { WebGLPathTracer, GradientEquirectTexture } from '..';\nimport { getScaledSettings } from './utils/getScaledSettings.js';\n\n// init scene, renderer, camera, controls, etc\nconst scene = new Scene();\nconst sphereGeom = new SphereGeometry( 0.49, 64, 32 );\nconst ball1 = new Mesh(\n\tsphereGeom,\n\tnew MeshStandardMaterial( {\n\t\tcolor: '#e91e63',\n\t\troughness: 0.25,\n\t\tmetalness: 1,\n\t} )\n);\nconst ball2 = new Mesh(\n\tsphereGeom,\n\tnew MeshStandardMaterial( {\n\t\tcolor: '#ff9800',\n\t\troughness: 0.1,\n\t\tmetalness: 1,\n\t} )\n);\nconst ball3 = new Mesh(\n\tsphereGeom,\n\tnew MeshStandardMaterial( {\n\t\tcolor: '#2196f3',\n\t\troughness: 0.2,\n\t\tmetalness: 1,\n\t} )\n);\nconst ground = new Mesh(\n\tnew BoxGeometry( 3.5, 0.1, 1.5 ),\n\tnew MeshStandardMaterial(),\n);\n\nball1.position.x = - 1;\nball3.position.x = 1;\nground.position.y = - 0.54;\nscene.add( ball1, ball2, ball3, ground );\n\n// set the environment map\nconst texture = new GradientEquirectTexture();\ntexture.bottomColor.set( 0xffffff );\ntexture.bottomColor.set( 0x666666 );\ntexture.update();\nscene.environment = texture;\nscene.background = texture;\n\nconst camera = new PerspectiveCamera();\ncamera.position.set( 0, 1, - 5 );\ncamera.lookAt( 0, 0, 0 );\n\nconst renderer = new WebGLRenderer( { antialias: true } );\nrenderer.toneMapping = ACESFilmicToneMapping;\ndocument.body.appendChild( renderer.domElement );\n\nconst settings = getScaledSettings();\nconst pathTracer = new WebGLPathTracer( renderer );\npathTracer.renderScale = settings.renderScale;\npathTracer.tiles.setScalar( settings.tiles );\npathTracer.setScene( scene, camera );\n\nonResize();\n\nanimate();\n\nwindow.addEventListener( 'resize', onResize );\n\nfunction animate() {\n\n\t// if the camera position changes call \"ptRenderer.reset()\"\n\trequestAnimationFrame( animate );\n\n\t// update the camera and render one sample\n\tpathTracer.renderSample();\n\n}\n\nfunction onResize() {\n\n\t// update rendering resolution\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\n\tconst aspect = w / h;\n\tcamera.aspect = aspect;\n\tcamera.updateProjectionMatrix();\n\n\tpathTracer.setScene( scene, camera );\n\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$88425f7125b6e46c$export$38d6a241e670a287","$ilwiq","$dbdMq","$88425f7125b6e46c$var$_direction","Vector3","ProceduralEquirectTexture","constructor","resolution","topColor","Color","bottomColor","exponent","generationCallback","polar","uv","coord","color","setFromSpherical","t","y","lerpColors","copy","other","$9986fde00d79bc96$export$ab88b3c5fea10066","$9986fde00d79bc96$var$_uv","Vector2","$9986fde00d79bc96$var$_coord","$9986fde00d79bc96$var$_polar","Spherical","$9986fde00d79bc96$var$_color","DataTexture","width","height","Float32Array","RGBAFormat","FloatType","EquirectangularReflectionMapping","RepeatWrapping","ClampToEdgeWrapping","LinearFilter","update","dispose","needsUpdate","data","image","x","theta","Math","PI","phi","radius","i4","r","g","b","$6171edc1778f11e8$export$3a05a7fb86d40d58","$hWj76","$hWds8","$RPVlj","$bHiTZ","$9wqOU","$5rCKZ","$6171edc1778f11e8$var$_resolution","multipleImportanceSampling","Boolean","_pathTracer","material","defines","FEATURE_MIS","setDefine","transmissiveBounces","bounces","filterGlossyFactor","samples","target","tiles","renderer","_renderer","_generator","PathTracingSceneGenerator","PathTracingRenderer","_queueReset","_clock","Clock","_lowResPathTracer","_quad","FullScreenQuad","ClampedInterpolationMaterial","map","transparent","blending","NoBlending","premultipliedAlpha","getContextAttributes","_materials","renderDelay","minSamples","fadeDuration","enablePathTracing","pausePathTracing","dynamicLowRes","lowResScale","renderScale","synchronizeRenderSize","rasterizeScene","renderToCanvas","textureSize","rasterizeSceneCallback","scene","camera","render","renderToCanvasCallback","quad","currentAutoClear","autoClear","setScene","Scene","PerspectiveCamera","setBVHWorker","worker","options","updateMatrixWorld","generator","setObjects","_buildAsync","generateAsync","onProgress","then","result","_updateFromResults","generate","setSceneAsync","args","setCamera","updateCamera","reset","updateMaterials","materials","textures","getTextures","setTextures","updateFrom","updateLights","lights","getLights","iesTextures","getIesTextures","iesProfiles","updateEnvironment","backgroundBlur","backgroundBlurriness","backgroundIntensity","backgroundRotation","makeRotationFromEuler","invert","background","backgroundMap","backgroundAlpha","isColor","_colorBackground","GradientEquirectTexture","colorBackground","equals","environmentIntensity","environmentRotation","_previousEnvironment","environment","envMapInfo","results","geometry","bvh","bvhChanged","pathTracer","attributesArray","attributes","normal","tangent","materialIndexAttribute","materialIndex","_previousScene","renderSample","lowResPathTracer","clock","_updateScale","opacity","start","delta","getDelta","elapsedTime","getElapsedTime","alpha","extensions","min","currentOpacity","texture","AdditiveBlending","NormalBlending","_renderQuad","getDrawingBufferSize","w","floor","h","getSize","setSize","$3f6d89af35c8e149$export$41f50d3add172b7d","ShaderMaterial","uniforms","value","params","vertexShader","fragmentShader","setValues","$934d596524c3e5a8$export$5bc756cb1c628b75","max","window","devicePixelRatio","innerWidth","innerHeight","$6bd4eb2914ee2835$export$f1ac3a587b6cbb5d","shader","key","name","$ba14a4aaa0cde19b$export$98323a006d35be35","$a21c9b4177584031$export$fe1d788deccfbee3","$60fb6dc3c6495c33$export$4c711108e2e8ef5e","$8mHfG","$cE5k3","$5dea9d3597503074$var$scene","$5dea9d3597503074$var$sphereGeom","SphereGeometry","$5dea9d3597503074$var$ball1","Mesh","MeshStandardMaterial","roughness","metalness","$5dea9d3597503074$var$ball2","$5dea9d3597503074$var$ball3","$5dea9d3597503074$var$ground","BoxGeometry","position","add","$5dea9d3597503074$var$texture","$5dea9d3597503074$var$camera","lookAt","$5dea9d3597503074$var$renderer","WebGLRenderer","antialias","toneMapping","ACESFilmicToneMapping","document","body","appendChild","domElement","$5dea9d3597503074$var$settings","getScaledSettings","$5dea9d3597503074$var$pathTracer","WebGLPathTracer","$5dea9d3597503074$var$onResize","setPixelRatio","aspect","updateProjectionMatrix","setScalar","$5dea9d3597503074$var$animate","requestAnimationFrame","addEventListener"],"version":3,"file":"primitives.19827130.js.map"}